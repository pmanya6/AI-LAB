class UnificationError(Exception):
    pass

def unify(term1, term2, substitutions=None):
    if substitutions is None:
        substitutions = {}

    # If both terms are the same, there's nothing to do
    if term1 == term2:
        return substitutions

    # If one of the terms is a variable, try to unify it with the other term
    elif isinstance(term1, str) and term1.isupper():
        return unify_var(term1, term2, substitutions)
    elif isinstance(term2, str) and term2.isupper():
        return unify_var(term2, term1, substitutions)

    # If both terms are lists (complex terms), unify their components
    elif isinstance(term1, list) and isinstance(term2, list):
        if len(term1) != len(term2):
            raise UnificationError(f"Cannot unify terms of different lengths: {term1} and {term2}")
        for subterm1, subterm2 in zip(term1, term2):
            substitutions = unify(subterm1, subterm2, substitutions)
        return substitutions

    # If the terms are neither the same nor variables, they cannot be unified
    else:
        raise UnificationError(f"Cannot unify {term1} with {term2}")

def unify_var(var, term, substitutions):
    if var in substitutions:
        return unify(substitutions[var], term, substitutions)

    # Avoid circular unification
    if term == var:
        return substitutions

    # Apply the substitution
    substitutions[var] = term
    return substitutions

# Example usage:
try:
    term1 = ['f', 'X', ['g', 'Y']]
    term2 = ['f', 'a', ['g', 'b']]
    substitutions = unify(term1, term2)
    print("Unification successful. Substitutions:", substitutions)
except UnificationError as e:
    print("Unification failed:", e)
