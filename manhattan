def manhattan_distance(state, goal_state): distance = 0
for i in range(3): for j in range(3):
if state[i][j] != 0:
goal_i = (state[i][j] - 1) // 3 goal_j = (state[i][j] - 1) % 3
distance += abs(i - goal_i) + abs(j - goal_j) return distance

def get_neighbors(state):
i, j = next((i, j) for i in range(3) for j in range(3) if state[i][j] == 0) moves = [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]
return [swap(state, i, j, x, y) for x, y in moves if 0 <= x < 3 and 0 <= y < 3]

def swap(state, i1, j1, i2, j2): new_state = [row[:] for row in state]
new_state[i1][j1], new_state[i2][j2] = new_state[i2][j2], new_state[i1][j1] return new_state

def dfs_with_manhattan(state, goal, visited=set()): if state == goal:
return [state] visited.add(str(state))
neighbors = sorted(get_neighbors(state), key=lambda x: manhattan_distance(x, goal)) for neighbor in neighbors:
if str(neighbor) not in visited:
path = dfs_with_manhattan(neighbor, goal, visited) if path:
return [state] + path return None
 
# Take user input for initial state
initial_state = [[int(x) for x in input(f"Enter row {i+1}: ").split()] for i in range(3)] goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]

solution = dfs_with_manhattan(initial_state, goal_state) if solution:
print("Solution found:") for state in solution:
print(*state, sep='\n', end='\n\n')
else:
print("No solution found.") print(“P Manya”) print(“1BM22CS187”)
