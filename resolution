
from typing import List, Tuple

def is_complementary(clause1: set, clause2: set) -> Tuple[bool, set]:
    """
    Check if two clauses are complementary and return the resolved clause if they are.
    """
    for literal in clause1:
        if f"~{literal}" in clause2:
            resolved = clause1.union(clause2)
            resolved.discard(literal)
            resolved.discard(f"~{literal}")
            return True, resolved
        elif literal.startswith("~") and literal[1:] in clause2:
            resolved = clause1.union(clause2)
            resolved.discard(literal)
            resolved.discard(literal[1:])
            return True, resolved
    return False, set()

def resolution(kb: List[set], goal: set) -> Tuple[bool, List[Tuple[set, List[int]]]]:
    """
    Perform resolution and build the proof tree.
    """
    proof_tree = []
    clauses = kb + [goal]  # Add negated goal to the KB
    new_clauses = []

    while True:
        # Generate new pairs of clauses
        pairs = [(clauses[i], clauses[j], (i, j)) for i in range(len(clauses)) for j in range(i + 1, len(clauses))]

        for clause1, clause2, (i, j) in pairs:
            complementary, resolved_clause = is_complementary(clause1, clause2)
            if complementary:
                if not resolved_clause:  # Empty clause found
                    proof_tree.append((resolved_clause, [i, j]))
                    return True, proof_tree
                if resolved_clause not in clauses and resolved_clause not in new_clauses:
                    new_clauses.append(resolved_clause)
                    proof_tree.append((resolved_clause, [i, j]))

        if not new_clauses:  # No progress, resolution failed
            return False, proof_tree

        clauses.extend(new_clauses)
        new_clauses = []

# Example case study
if __name__ == "__main__":
    # Knowledge Base (KB) in CNF format
    kb = [
        {"P", "Q"},       # Clause 1: P ∨ Q
        {"~P", "R"},      # Clause 2: ¬P ∨ R
        {"~R"},           # Clause 3: ¬R
    ]
    goal = {"~Q"}  # Negated goal: ¬Q

    success, proof_tree = resolution(kb, goal)
    if success:
        print("PROVED")
    else:
        print("CAN'T BE PROVED")

    print("\nProof Tree:")
    for i, (clause, parents) in enumerate(proof_tree):
        print(f"Step {i + 1}: {clause} from {parents}")
