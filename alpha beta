def is_safe(board, row, col): """
Check if it's safe to place a queen at board[row][col].

"""

# Check for queen in the same column for i in range(row):
if board[i][col] == 1: return False
# Check for queen in the left diagonal

for i, j in zip(range(row, -1, -1), range(col, -1, -1)): if board[i][j] == 1:
return False

# Check for queen in the right diagonal

for i, j in zip(range(row, -1, -1), range(col, len(board))): if board[i][j] == 1:
return False return True
def solve_with_alpha_beta(board, row, alpha, beta): """
Solve the 8-Queens problem using Alpha-Beta Pruning. """
if row >= len(board): # All queens placed successfully return True

for col in range(len(board)): if is_safe(board, row, col):
# Place the queen board[row][col] = 1
# Recursive call to place the next queen

if solve_with_alpha_beta(board, row + 1, alpha, beta): return True
# Backtrack if placing the queen here leads to failure board[row][col] = 0
# Update alpha and beta for pruning (though not strictly necessary for 8-Queens) alpha = max(alpha, col)
if beta <= alpha: break # Prune
return False

def solve_8_queens(): """
Solves the 8-Queens problem and prints the solution. """
n = 8

board = [[0 for _ in range(n)] for _ in range(n)]

# Start solving with Alpha-Beta Pruning

if solve_with_alpha_beta(board, 0, -float('inf'), float('inf')): print("Solution:")
for row in board:

print(' '.join('Q' if cell == 1 else '.' for cell in row))

else:

print("No solution found.") # Execute the solver
if   name	== "  main  ":

solve_8_queens()

print("P Manya") print("1BM22CS187")
