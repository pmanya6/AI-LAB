from copy import deepcopy


def is_goal(state):
    goal_state = [[1, 2, 3],
                  [5, 8, 6],
                  [0, 7, 4]]
    return state == goal_state


def get_blank_position(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j


def generate_new_states(state):
    row, col = get_blank_position(state)
    new_states = []


    moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    for move in moves:
        new_row, new_col = row + move[0], col + move[1]
        if 0 <= new_row < 3 and 0 <= new_col < 3:
            new_state = deepcopy(state)

            new_state[row][col], new_state[new_row][new_col] = new_state[new_row][new_col], new_state[row][col]
            new_states.append(new_state)

    return new_states


def dls(state, depth_limit, visited_states, path):
    if is_goal(state):
        path.append(state)
        return True

    if depth_limit <= 0:
        return False

    visited_states.append(state)


    for new_state in generate_new_states(state):
        if new_state not in visited_states:
            path.append(state)
            result = dls(new_state, depth_limit - 1, visited_states, path)
            if result:
                return True
            path.pop()

    visited_states.pop()
    return False


def ids(initial_state, max_depth):
    for depth in range(max_depth + 1):
        print(f"Searching at depth: {depth}")
        visited_states = []
        path = []
        result = dls(initial_state, depth, visited_states, path)
        if result:
            return path
    return None


def print_state(state):
    for row in state:
        print(row)
    print()


initial_state = [[1, 2, 3],
                 [5, 6, 0],
                 [7, 8, 4]]


path_to_goal = ids(initial_state, 10)

if path_to_goal:
    print("Path to goal found:")
    for state in path_to_goal:
        print_state(state)
else:
    print("No solution found within the depth limit.")
