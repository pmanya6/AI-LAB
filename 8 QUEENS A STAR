import numpy as np import heapq

class Node:
def   init  (self, state, g, h):
self.state = state # Current state of the board self.g = g	# Cost to reach this state self.h = h	# Heuristic cost to reach goal self.f = g + h		# Total cost

def   lt  (self, other):

return self.f < other.f

def heuristic(state):
# Count pairs of queens that can attack each other attacks = 0
for i in range(len(state)):
for j in range(i + 1, len(state)):
if state[i] == state[j] or abs(state[i] - state[j]) == j - i: attacks += 1
return attacks

def a_star_8_queens():
initial_state = [-1] * 8 # -1 means no queen placed open_list = []
closed_set = set()
initial_h = heuristic(initial_state) heapq.heappush(open_list, Node(initial_state, 0, initial_h))

while open_list:
current_node = heapq.heappop(open_list) current_state = current_node.state closed_set.add(tuple(current_state))

# Check if we reached the goal if current_node.h == 0:
return current_state

for col in range(8):
if current_state[col] == -1: # Only place a queen if none is present in this column for row in range(8):
new_state = current_state.copy() new_state[col] = row


if tuple(new_state) not in closed_set: g_cost = current_node.g + 1 h_cost = heuristic(new_state)
heapq.heappush(open_list, Node(new_state, g_cost, h_cost))
return None


solution = a_star_8_queens() print("A* solution:", solution) print("P Manya") print("1BM22CS187")
